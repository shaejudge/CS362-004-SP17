        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "asserttrue.h"
        -:    8:
     2000:    9:int testVillage(int p, struct gameState *state){
        -:   10:	//set current deck size to variable
     2000:   11:	int currentDeck = state->handCount[p];
        -:   12:	int afterDeck;
        -:   13:	int deckDif;
        -:   14:	
     2000:   15:	printf("Deck Size Before: %d\n", currentDeck);
        -:   16:	
        -:   17:	//draw Village
     2000:   18:	useVillage(p, state);
        -:   19:		
        -:   20:	//check to see if deck size increased by 1
     2000:   21:	afterDeck = state->handCount[p];
     2000:   22:	printf("Deck Size After: %d\n", afterDeck);	
        -:   23:		
     2000:   24:	deckDif = afterDeck - currentDeck;
     2000:   25:	printf("Player should have 1 more card, and has %d more cards\n", deckDif);
     2000:   26:	assertTrue(deckDif == 1);
        -:   27:	
     2000:   28:	return 0;
        -:   29:}
        -:   30:
        1:   31:int main(int argc, char **argv){
        -:   32:	int i, n, r, p, deckCount, discardCount, handCount;
        -:   33:
        1:   34:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   35:		   remodel, smithy, village, baron, great_hall};
        -:   36:
        -:   37:	struct gameState G;
        -:   38:
        1:   39:	printf ("Testing Village.\n");
        -:   40:
        1:   41:	printf ("RANDOM TESTS.\n");
        -:   42:
        1:   43:	SelectStream(2);
        1:   44:	PutSeed(3);
        -:   45:
     2001:   46:	for (n = 0; n < 2000; n++) {
 52602000:   47:		for (i = 0; i < sizeof(struct gameState); i++) {
 52600000:   48:		  ((char*)&G)[i] = floor(Random() * 256);
        -:   49:		}
     2000:   50:		p = floor(Random() * 2);
     2000:   51:		G.deckCount[p] = floor(Random() * MAX_DECK);
     2000:   52:		G.discardCount[p] = floor(Random() * MAX_DECK);
     2000:   53:		G.handCount[p] = floor(Random() * MAX_HAND);
     2000:   54:		testVillage(p, &G);
        -:   55:	}
        1:   56:}
